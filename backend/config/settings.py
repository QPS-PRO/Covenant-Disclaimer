"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import environ
import os
from datetime import timedelta


env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hnh4vh+@8)@t#d=_7*ljtv80zsk_6q=c+m(752q_v4q8zu!eyo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '*'
]
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    # 'https://api.ictcoegyptstock.com'
]


CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_EXPOSE_HEADERS = [
    'Content-Disposition',
    'Content-Type',
    'Content-Length',
]



# Application definition

INSTALLED_APPS = [
    "jazzmin",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "django_filters",
    "corsheaders",
    "drf_spectacular",
    
    "apps.users",
    "apps.assets",
    "apps.disclaimer",
    'apps.reports',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "apps.disclaimer.middleware.UserContextMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": env("PAGE_SIZE"),

    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": "app-auth",
    "JWT_AUTH_REFRESH_COOKIE": "app-refresh",
    "JWT_AUTH_SECURE": False,
    "JWT_AUTH_SAMESITE": "Lax",
    "JWT_AUTH_HTTP_ONLY": True,
    "JWT_AUTH_COOKIE_USE_CSRF": False,
    "USER_DETAILS_SERIALIZER": "apps.users.serializers.UserSerializer",
    "REGISTER_SERIALIZER": "apps.users.serializers.CustomRegisterSerializer",
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=5),
}

CSRF_COOKIE_SECURE = False
SESSION_COOKIE_SECURE = False

# AllAuth Settings
AUTH_USER_MODEL = "users.User"
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_LOGIN_METHODS = {"email"}  # Set to use email only
ACCOUNT_SIGNUP_FIELDS = [
    "first_name",
    "last_name",
    "email",
    "password1",
    "password2",
]

SILENCED_SYSTEM_CHECKS = [
    "account.W001",
]


JAZZMIN_SETTINGS = { 
    "site_title": "APP Admin",
    "copyright": "Millennium Ltd",
    "show_ui_builder": True,
}
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_ROOT = BASE_DIR / "media"
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = '***********@gmail.com'
# EMAIL_HOST_PASSWORD = ''
# DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Face Recognition Settings - SECURITY CRITICAL
# IMPORTANT: These settings directly impact security and accuracy
# Lower tolerance = stricter matching, fewer false positives
FACE_RECOGNITION_TOLERANCE = env.float('FACE_RECOGNITION_TOLERANCE', default=0.4)  # CRITICAL: Reduced from 0.6 for security
FACE_RECOGNITION_MODEL = env.str('FACE_RECOGNITION_MODEL', default='hog')  # 'hog' or 'cnn'

# Quality Validation Thresholds - SECURITY CRITICAL
# These ensure FULL FACE is captured - NO PARTIAL FACES ALLOWED
FACE_QUALITY_THRESHOLDS = {
    'min_quality_score': env.float('FACE_MIN_QUALITY_SCORE', default=0.45),  # Higher quality required
    'min_sharpness': env.float('FACE_MIN_SHARPNESS', default=35.0),  # Clear image required
    'min_brightness': env.float('FACE_MIN_BRIGHTNESS', default=70.0),  # Good lighting required
    'max_brightness': env.float('FACE_MAX_BRIGHTNESS', default=210.0),  # Avoid overexposure
    'min_face_size': env.int('FACE_MIN_SIZE', default=180),  # CRITICAL: Face must be at least 180x180 pixels (larger for full face)
    'min_face_ratio': env.float('FACE_MIN_RATIO', default=0.12),  # CRITICAL: Face must occupy at least 12% of image (NO PARTIAL FACES)
    'max_face_ratio': env.float('FACE_MAX_RATIO', default=0.65),  # Face can't be too close (65% max - ensures full face visible)
    'min_center_offset': env.float('FACE_MIN_CENTER_OFFSET', default=0.30),  # Face must be reasonably centered
    'min_face_aspect_ratio': env.float('FACE_MIN_ASPECT_RATIO', default=0.75),  # CRITICAL: Face width/height ratio (prevents horizontal slices)
    'max_face_aspect_ratio': env.float('FACE_MAX_ASPECT_RATIO', default=1.35),  # CRITICAL: Face width/height ratio (prevents vertical slices)
}

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'shobify': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'apps.assets': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)
